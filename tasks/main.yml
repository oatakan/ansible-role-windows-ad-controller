---

- name: install required powershell module
  win_psmodule:
    name: xActiveDirectory
    state: present

- name: install AD
  win_dsc:
    resource_name: WindowsFeature
    Name: "{{ item }}"
    IncludeAllSubFeature: True
    Ensure: Present
  register: install_ad
  ignore_errors: yes
  loop:
    - AD-Domain-Services
    - DNS

- name: reboot if needed
  win_reboot:
  when: item.reboot_required
  loop: "{{ install_ad.results }}"

- name: add domain
  win_dsc:
    resource_name: xADDomain
    DomainName: "{{ dns_domain_name }}"
    DomainAdministratorCredential_username: "Admin@{{ dns_domain_name }}"
    DomainAdministratorCredential_password: "{{ domain_admin_password }}"
    SafemodeAdministratorPassword_username: "Admin@{{ dns_domain_name }}"
    SafemodeAdministratorPassword_password: "{{ domain_admin_password }}"
    #DnsDelegationCredential_username: "Admin@{{ dns_domain_name }}"
    #DnsDelegationCredential_password: "{{ domain_admin_password }}"
    ForestMode: WinThreshold
    DomainMode: WinThreshold
#  register: add_domain

#- name: Create DNS Domain
#  win_domain:
#    dns_domain_name: "{{ dns_domain_name }}"
#    safe_mode_password: "{{ domain_admin_password }}"
#  register: add_domain

- name: reboot
  win_reboot:
  when: add_domain is changed

- name: wait for AD domain
  win_dsc:
    resource_name: xWaitForADDomain
    DomainName: "{{ dns_domain_name }}"
    #DomainUserCredential_username: "Admin@{{ dns_domain_name }}"
    #DomainUserCredential_password: "{{ domain_admin_password }}"

#- name: adjust password policy
#  win_dsc:
#    resource_name: xADDomainDefaultPasswordPolicy
#    DomainName: "{{ dns_domain_name }}"
#    ComplexityEnabled: False
#    MinPasswordLength: 8
#    PasswordHistoryCount: 10

- name: add groups
  win_dsc:
    resource_name: xADGroup
    GroupName: "{{ item.name }}"
    GroupScope: "{{ item.scope }}"
    Ensure: Present
  loop: "{{ ad_groups }}"

- name: Add windows domain admin
  win_domain_user:
    name: "Admin"
    upn: "Admin@{{ dns_domain_name }}"
    state: present
    enabled: yes
    account_locked: no
    groups:
      - Domain Admins
    password: "{{ domain_admin_password }}"
    update_password: on_create
    password_expired: false
    firstname: admin
    surname: user
    company: AnsibleByRedHat
    email: "Admin@{{ dns_domain_name }}"

- name: add domain admin user
  win_dsc:
    resource_name: xADUser
    UserName: "Admin"
    Password_password: "{{ domain_admin_password }}"
    DomainName: "{{ dns_domain_name }}"
    #DomainAdministratorCredential_username: "Admin@{{ dns_domain_name }}"
    #DomainAdministratorCredential_password: "{{ domain_admin_password }}"
    Enabled: True
    GivenName: admin
    Surname: user
    Company: AnsibleByRedHat
    EmailAddress: "Admin@{{ dns_domain_name }}"
    Ensure: Present

- name: add admin user to Domain Admins group
  win_dsc:
    resource_name: xADGroup
    GroupName: Domain Admins
    MembersToInclude: Admin

- name: add domain users
  win_dsc:
    resource_name: xADUser
    UserName: "{{ item.username }}"
    Password_password: "{{ users_password }}"
    DomainName: "{{ dns_domain_name }}"
    DomainAdministratorCredential_username: "Admin@{{ dns_domain_name }}"
    DomainAdministratorCredential_password: "{{ domain_admin_password }}"
    Enabled: True
    GivenName: "{{ item.username }}"
    Surname: user
    Company: AnsibleByRedHat
    EmailAddress: "{{ item.username }}@{{ dns_domain_name }}"
    Ensure: Present
  loop: "{{ ad_users }}"

- name: add domain users to groups
  win_dsc:
    resource_name: xADGroup
    GroupName: "{{ item.1 }}"
    MembersToInclude: "{{ item.0 }}"
  loop: "{{ query('nested', ad_users, [ 'Ansible Users', 'Remote Desktop Users' ]) }}"